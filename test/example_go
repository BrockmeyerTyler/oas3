package main

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"github.com/tjbrockmeyer/oas"
	"log"
	"net/http"
	"os"
)

func main() {
	strSchema := json.RawMessage(`{"type":"string"}`)
	intSchema := json.RawMessage(`{"type":"integer"}`)
	ep := oas.NewEndpoint("GET", "/search", "Summary", "Description", "Tag1", "Tag2").
		Version(1).
		Parameter("query", "q", "The search query", true, strSchema).
		Parameter("query", "limit", "Limit the amount of returned results", true, intSchema).
		Parameter("query", "skip", "How many results to skip over before returning", true, intSchema).
		Response(200, "Results were found", oas.SchemaRef("SearchResults")).
		Response(204, "No results found", nil).
		Func(func(r *http.Request) *oas.Response {
			// Your search logic here...
			return &oas.Response{Status: 204}
		})
	// ep2 := oas.NewEndpoint(...)
	// ep3 := oas.NewEndpoint(...)
	// endpoints := []*oas.Endpoint{...}

	address := "localhost:5000"
	r := mux.NewRouter().StrictSlash(true)
	endpointRouter := r.PathPrefix("/api").Subrouter()

	//noinspection ALL
	defer os.RemoveAll("./public")
	spec := oas.NewOpenAPI("API Title", "Description", "1.0.0", "./public").
		Endpoints(func(method, path string, handler http.HandlerFunc) {
			endpointRouter.Path(path).Methods(method).HandlerFunc(handler)
		}, ep, /* ep2, ep3, ...endpoints, etc */).
		Server(address, "The local API").
		Tag("Tag1", "The first tag").
		Tag("Tag2", "The second tag")
	if fileServer, err := spec.CreateSwaggerUI(); err != nil {
		panic(err)
	} else {
		endpointRouter.PathPrefix("/docs").Handler(http.StripPrefix("/api/docs/", fileServer))
	}
	if err := spec.AddSchemaFile("schemas.json", ""); err != nil {
		panic(err)
	}
	if err := spec.Save(); err != nil {
		panic(err)
	}

	err := http.ListenAndServe(address, r)
	log.Println(err)
	log.Printf("Listening at \"http://%s\".\n", address)
}
